package com.practice;

import com.saucelabs.common.SauceOnDemandAuthentication;
import com.saucelabs.common.SauceOnDemandSessionIdProvider;
import com.saucelabs.junit.ConcurrentParameterized;
import com.saucelabs.junit.SauceOnDemandTestWatcher;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

import java.net.URL;
import java.util.LinkedList;
import java.util.concurrent.TimeUnit;


@RunWith(ConcurrentParameterized.class)
public class Rehearsal implements SauceOnDemandSessionIdProvider {

    public SauceOnDemandAuthentication authentication = new SauceOnDemandAuthentication("sauceUser", "sauceKey");

    @Rule
    public SauceOnDemandTestWatcher resultReportingTestWatcher = new SauceOnDemandTestWatcher(this, authentication);

    private String browser;

    private String os;

    private String version;

    private String sessionId;

    private WebDriver driver;

    public Rehearsal(String os, String version, String browser) {

        super();
        this.os = os;
        this.version = version;
        this.browser = browser;

    }

    @ConcurrentParameterized.Parameters
    public static LinkedList browsersStrings() {
        LinkedList browsers = new LinkedList();
        browsers.add(new String[]{"Windows 8.1", "11", "internet explorer"});
        browsers.add(new String[]{"OSX 10.8", "6", "safari"});
        return browsers;
    }

    @Before
    public void setUp() throws Exception {

        DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setCapability(CapabilityType.BROWSER_NAME, browser);
        if (version != null) {
            capabilities.setCapability(CapabilityType.VERSION, version);
        }
        capabilities.setCapability(CapabilityType.PLATFORM, os);
        capabilities.setCapability("name", "Rehearsal");
        this.driver = new RemoteWebDriver(
                new URL("http://" + authentication.getUsername() + ":" + authentication.getAccessKey() + "@ondemand.saucelabs.com:80/wd/hub"),
                capabilities);
        this.sessionId = (((RemoteWebDriver) driver).getSessionId()).toString();
    }

    @Test

    public void loginTest() throws Exception {

        driver.get("http://www.itsmicah.com/wp-login.php?action=register");
        driver.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);

        Actions act = new Actions(driver);
        WebElement user = driver.findElement(By.id("username"));
        WebElement password = driver.findElement(By.id("password"));
        WebElement confirm_password = driver.findElement(By.id("confirm_password"));
        WebElement email = driver.findElement(By.id("email"));
        WebElement submit = driver.findElement(By.id("form.submitted"));

        user.sendKeys("NormaJean");
        password.sendKeys("triffids");
        confirm_password.sendKeys("triffids");
        email.sendKeys("admin@itsmicah.com");
        submit.click();
    }

    @After
    public void tearDown() {
        driver.quit();
    }

    @Override
    public String getSessionId() {
        return sessionId;
    }
}
